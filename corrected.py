# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'corrected.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QComboBox, QItemDelegate, QAction, QDialog
import psycopg2


# class AddItemWindow(QDialog):
#     def __init__(self):
#         super().__init__()
#         self.setWindowTitle("Add New Item")
#         self.resize(300, 200)

#         self.stock_combo_box = stock_combo_box  # Store the stock_combo_box reference

#         layout = QtWidgets.QVBoxLayout()

#         self.item_name_label = QtWidgets.QLabel("Item Name:")
#         self.item_name_input = QtWidgets.QLineEdit()
#         layout.addWidget(self.item_name_label)
#         layout.addWidget(self.item_name_input)

#         self.add_button = QtWidgets.QPushButton("Add")
#         self.add_button.clicked.connect(self.add_item)
#         layout.addWidget(self.add_button)

#         self.setLayout(layout)

#     def add_item(self):
#         new_item_name = self.item_name_input.text()

#         if new_item_name:
#             # Connect to PostgreSQL database
#             conn = psycopg2.connect(
#                 dbname="inventory",
#                 user="postgres",
#                 password="briankihiakiama",
#                 host="localhost",
#                 port="5432"
#             )
#             cur = conn.cursor()

#             try:
#                 # Insert the new item into the 'item' table
#                 cur.execute("INSERT INTO item (item_name) VALUES (%s)", (new_item_name,))
#                 conn.commit()
#                 self.stock_combo_box.addItem(new_item_name)
#                 self.item_name_input.clear()
#                 print("Added:", new_item_name)
#             except psycopg2.IntegrityError:
#                 print("Item already exists")
#                 # Handle integrity violation (item already exists)

#             # Close connection
#             conn.close()
#         else:
#             print("Please enter an item name")
                



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 422)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(190, 30, 411, 231))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")


        self.tableWidget = QtWidgets.QTableWidget(self.formLayoutWidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.SpanningRole, self.tableWidget)


        self.add_radio_button = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.add_radio_button.setObjectName("add_radio_button")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.add_radio_button)
        self.subtract_radio_button = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.subtract_radio_button.setObjectName("subtract_radio_button")


        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.subtract_radio_button)
        self.pushButton = QtWidgets.QPushButton(self.formLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.SpanningRole, self.pushButton)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


          # Create a menu action to open the Add Item window
        self.menu_action = QAction("Add Item", MainWindow)
        self.menu_action.triggered.connect(self.open_add_item_window)
        self.menu = self.menubar.addMenu("Stock")
        self.menu.addAction(self.menu_action)



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "stock"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "quantity"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "buying_price"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "selling_price"))
        self.add_radio_button.setText(_translate("MainWindow", "Add Stock"))
        self.subtract_radio_button.setText(_translate("MainWindow", "Subtract Stock"))
        self.pushButton.setText(_translate("MainWindow", "Submit"))


        # Initialize the combo box
        self.stock_combo_box = QComboBox()
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.SpanningRole, self.stock_combo_box)
        self.populate_combo_box()

         # Create a QComboBox for the stock column
        # self.stock_combo_box = QComboBox()
        # self.stock_combo_box.addItems(["Books", "LightBulb", "Flowers", "Phones","laptop"])  # Add your desired items here

         # Set the QComboBox as the item delegate for the stock column
        self.tableWidget.setItemDelegateForColumn(0, MyComboBoxDelegate(self.stock_combo_box))


        # self.pushButton.clicked.connect(self.submit_data)

    def open_add_item_window(self):
        new_item_name, ok = QtWidgets.QInputDialog.getText(None, 'Add New Item', 'Enter item name:')
        if ok and new_item_name:
            # Connect to PostgreSQL database
            conn = psycopg2.connect(
                dbname="inventory",
                user="postgres",
                password="briankihiakiama",
                host="localhost",
                port="5432"
            )
            cur = conn.cursor()

            try:
                # Insert the new item into the 'item' table
                cur.execute("INSERT INTO item (item_name) VALUES (%s)", (new_item_name,))
                conn.commit()
                self.stock_combo_box.addItem(new_item_name)
                print("Added:", new_item_name)
            except psycopg2.IntegrityError:
                print("Item already exists")
                # Handle integrity violation (item already exists)

            # Close connection
            conn.close()

    # def open_add_item_window(self):
    #     self.add_item_window = AddItemWindow()
    #     self.add_item_window.exec_()
    

    def populate_combo_box(self):
    # Connect to PostgreSQL database
        conn = psycopg2.connect(
            dbname="inventory",
            user="postgres",
            password="briankihiakiama",
            host="localhost",
            port="5432"
        )
        cur = conn.cursor()

        # Check if the table 'item' exists
        cur.execute("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'item')")
        table_exists = cur.fetchone()[0]

        # If the 'item' table doesn't exist, create it
        if not table_exists:
            cur.execute("""
                CREATE TABLE item (
                    id SERIAL PRIMARY KEY,
                    item_name VARCHAR(255) UNIQUE
                )
            """)
            conn.commit()

        # Fetch items from the 'item' table
        cur.execute("SELECT item_name FROM item")
        items = cur.fetchall()
        self.stock_combo_box.clear()
        for item in items:
            self.stock_combo_box.addItem(item[0])

        # Close connection
        conn.close()



    def submit_data(self):
        rows = self.tableWidget.rowCount()
        cols = self.tableWidget.columnCount()

         # Connect to PostgreSQL database
        conn = psycopg2.connect(
            dbname="inventory",
            user="postgres",
            password="briankihiakiama",
            host="localhost",
            port="5432"
        )
        cur = conn.cursor()


         # Check which radio button is checked
        if self.add_radio_button.isChecked():
            transaction_type = "Addition"
            # For addition, keep the quantity positive
            quantity_modifier = 1
            
        elif self.subtract_radio_button.isChecked():
            transaction_type = "Subtraction"
            # For subtraction, make the quantity negative
            quantity_modifier = -1
            
        else:
            # Neither radio button is checked
            QtWidgets.QMessageBox.warning(None, "Error", "Please select an operation.")
            return
        
        
        
         # Initialize existing_record
        existing_record = None

                # Check if the table invent exists
        cur.execute("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'invent')")
        table_exists = cur.fetchone()[0]


         # If the table doesn't exist, create it
        if not table_exists:
            cur.execute("""
                CREATE TABLE invent (
                    id SERIAL PRIMARY KEY,
                    stock VARCHAR(255),
                    quantity INTEGER
                    )
            """)

            # check if the table transactions exist
        cur.execute("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'transactions')")
        table_exists = cur.fetchone()[0]


        if not table_exists:
            cur.execute("""
                CREATE TABLE transactions (
                    id SERIAL PRIMARY KEY,
                    transaction_type VARCHAR(100),
                    stock VARCHAR(255),
                    quantity INTEGER,
                    buying_price NUMERIC,
                    selling_price NUMERIC,
                    profit NUMERIC,
                    total_profit NUMERIC,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)


            # Insert data into PostgreSQL database
        for row in range(rows):
            stock = self.tableWidget.item(row, 0).text()
            quantity = int(self.tableWidget.item(row, 1).text()) * quantity_modifier  # Adjust quantity
            buying_price = float(self.tableWidget.item(row, 2).text())
            selling_price = float(self.tableWidget.item(row, 3).text())


             # Check if the stock item exists in invent table and has enough quantity for subtraction
            if  quantity_modifier == -1:
                cur.execute("SELECT id, quantity FROM invent WHERE stock = %s", (stock,))
                existing_record = cur.fetchone()
            if self.subtract_radio_button.isChecked() and (existing_record is None or existing_record[1] < abs(quantity)):
                # QtWidgets.QMessageBox.warning(MainWindow, "Error", f"Not enough quantity of {stock} in inventory.")
                QtWidgets.QMessageBox.warning(None, "Error", f"Not enough quantity of {stock} in inventory.")
                continue  # Skip processing this row



             # Calculate profit
            profit = selling_price - buying_price

            # calculating total profit
            total_profit = profit * abs(quantity)


            # Check if the stock item already exists
            cur.execute("SELECT id, quantity FROM invent WHERE stock = %s", (stock,))
            existing_record = cur.fetchone()



            # Check if the stock item already exists
            cur.execute("SELECT id, quantity FROM invent WHERE stock = %s", (stock,))
            existing_record = cur.fetchone()


            if existing_record:
            # If the stock item exists, update its information
                new_quantity = existing_record[1] + quantity  # update quantity
                cur.execute("""
                    UPDATE invent
                    SET quantity = %s
                    WHERE id = %s
                """, (new_quantity,  existing_record[0]))

            
             # Log the transaction
                cur.execute("""
                    INSERT INTO transactions (transaction_type, stock, quantity, buying_price, selling_price, profit, total_profit)
                    VALUES (%s, %s, %s, %s , %s, %s, %s)
                """, (transaction_type,stock, abs(quantity), buying_price, selling_price, profit, total_profit))

            
            else:
            # If the stock item doesn't exist, insert a new record
                cur.execute("""
                    INSERT INTO invent (stock, quantity )
                    VALUES (%s, %s)
                    RETURNING id
                """, (stock, quantity))
                existing_record = cur.fetchone()


                 # Log the transaction
                cur.execute("""
                    INSERT INTO transactions (transaction_type, stock, quantity, buying_price, selling_price, profit, total_profit)
                    VALUES (%s, %s, %s , %s, %s, %s, %s)
                """, (transaction_type,stock, abs(quantity), buying_price, selling_price, profit, total_profit))


                 # Insert data into the database
        # cur.execute("INSERT INTO invent (stock, quantity, buying_price, selling_price, profit, total_profit) VALUES (%s, %s, %s, %s, %s, %s)",
        #             (stock, quantity, buying_price, selling_price, profit, total_profit))

        # Commit changes and close connection
        conn.commit()
        conn.close()


         # Clear the form data
        self.tableWidget.clearContents()  # Clear table contents
        
        

# def clear_radio_buttons(self):
#         self.add_radio_button.setChecked(False)
#         self.subtract_radio_button.setChecked(False)



class MyComboBoxDelegate(QItemDelegate):
    def __init__(self, combo_box):
        super().__init__()
        self.combo_box = combo_box

    def createEditor(self, parent, option, index):
        return self.combo_box



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

     # Connect the clicked signal of the pushButton to the submit_data method
    # ui.pushButton.clicked.connect(lambda: ui.submit_data(MainWindow))
    ui.pushButton.clicked.connect(ui.submit_data)


    sys.exit(app.exec_())
