# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'corrected.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QComboBox, QItemDelegate
import psycopg2


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 422)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.formLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.formLayoutWidget.setGeometry(QtCore.QRect(190, 30, 411, 231))
        self.formLayoutWidget.setObjectName("formLayoutWidget")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName("formLayout")


        self.tableWidget = QtWidgets.QTableWidget(self.formLayoutWidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        self.tableWidget.setRowCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.formLayout.setWidget(1, QtWidgets.QFormLayout.SpanningRole, self.tableWidget)


        self.add_radio_button = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.add_radio_button.setObjectName("add_radio_button")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.add_radio_button)
        self.subtract_radio_button = QtWidgets.QRadioButton(self.formLayoutWidget)
        self.subtract_radio_button.setObjectName("subtract_radio_button")


        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.subtract_radio_button)
        self.pushButton = QtWidgets.QPushButton(self.formLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.SpanningRole, self.pushButton)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "stock"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "quantity"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "buying_price"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "selling_price"))
        self.add_radio_button.setText(_translate("MainWindow", "Add Stock"))
        self.subtract_radio_button.setText(_translate("MainWindow", "Subtract Stock"))
        self.pushButton.setText(_translate("MainWindow", "Submit"))



         # Create a QComboBox for the stock column
        self.stock_combo_box = QComboBox()
        self.stock_combo_box.addItems(["Books", "LightBulb", "Flowers", "Phones","laptop"])  # Add your desired items here

         # Set the QComboBox as the item delegate for the stock column
        self.tableWidget.setItemDelegateForColumn(0, MyComboBoxDelegate(self.stock_combo_box))


        self.pushButton.clicked.connect(self.submit_data)


    def submit_data(self):
        rows = self.tableWidget.rowCount()
        cols = self.tableWidget.columnCount()

         # Connect to PostgreSQL database
        conn = psycopg2.connect(
            dbname="inventory",
            user="postgres",
            password="briankihiakiama",
            host="localhost",
            port="5432"
        )
        cur = conn.cursor()


         # Check which radio button is checked
        if self.add_radio_button.isChecked():
            transaction_type = "Addition"
            # For addition, keep the quantity positive
            quantity_modifier = 1
        elif self.subtract_radio_button.isChecked():
            transaction_type = "Subtraction"
            # For subtraction, make the quantity negative
            quantity_modifier = -1
        else:
            # Neither radio button is checked
            return
        

                # Check if the table invent exists
        cur.execute("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'invent')")
        table_exists = cur.fetchone()[0]


         # If the table doesn't exist, create it
        if not table_exists:
            cur.execute("""
                CREATE TABLE invent (
                    id SERIAL PRIMARY KEY,
                    stock VARCHAR(255),
                    quantity INTEGER
                    )
            """)

            # check if the table transactions exist
        cur.execute("SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'transactions')")
        table_exists = cur.fetchone()[0]


        if not table_exists:
            cur.execute("""
                CREATE TABLE transactions (
                    id SERIAL PRIMARY KEY,
                    transaction_type VARCHAR(100),
                    stock VARCHAR(255),
                    quantity INTEGER,
                    buying_price NUMERIC,
                    selling_price NUMERIC,
                    profit NUMERIC,
                    total_profit NUMERIC,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)


            # Insert data into PostgreSQL database
        for row in range(rows):
            stock = self.tableWidget.item(row, 0).text()
            quantity = int(self.tableWidget.item(row, 1).text()) * quantity_modifier  # Adjust quantity
            buying_price = float(self.tableWidget.item(row, 2).text())
            selling_price = float(self.tableWidget.item(row, 3).text())

             # Calculate profit
            profit = selling_price - buying_price

            # calculating total profit
            total_profit = profit * abs(quantity)


            # Check if the stock item already exists
            cur.execute("SELECT id, quantity FROM invent WHERE stock = %s", (stock,))
            existing_record = cur.fetchone()



            # Check if the stock item already exists
            cur.execute("SELECT id, quantity FROM invent WHERE stock = %s", (stock,))
            existing_record = cur.fetchone()


            if existing_record:
            # If the stock item exists, update its information
                new_quantity = existing_record[1] + quantity  # update quantity
                cur.execute("""
                    UPDATE invent
                    SET quantity = %s
                    WHERE id = %s
                """, (new_quantity,  existing_record[0]))

            
             # Log the transaction
                cur.execute("""
                    INSERT INTO transactions (transaction_type, stock, quantity, buying_price, selling_price, profit, total_profit)
                    VALUES (%s, %s, %s, %s , %s, %s, %s)
                """, (transaction_type,stock, abs(quantity), buying_price, selling_price, profit, total_profit))

            
            else:
            # If the stock item doesn't exist, insert a new record
                cur.execute("""
                    INSERT INTO invent (stock, quantity )
                    VALUES (%s, %s)
                    RETURNING id
                """, (stock, quantity))
                existing_record = cur.fetchone()


                 # Log the transaction
                cur.execute("""
                    INSERT INTO transactions (transaction_type, stock, quantity, buying_price, selling_price, profit, total_profit)
                    VALUES (%s, %s, %s , %s, %s, %s, %s)
                """, (transaction_type,stock, abs(quantity), buying_price, selling_price, profit, total_profit))


                 # Insert data into the database
        # cur.execute("INSERT INTO invent (stock, quantity, buying_price, selling_price, profit, total_profit) VALUES (%s, %s, %s, %s, %s, %s)",
        #             (stock, quantity, buying_price, selling_price, profit, total_profit))

        # Commit changes and close connection
        conn.commit()
        conn.close()





class MyComboBoxDelegate(QItemDelegate):
    def __init__(self, combo_box):
        super().__init__()
        self.combo_box = combo_box

    def createEditor(self, parent, option, index):
        return self.combo_box



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
